apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rollout-sample-dashboard
spec:
  rules:
    - host: rollout-sample-dashboard
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: rollout-sample-dashboard
                port:
                  name: http
---
apiVersion: v1
kind: Service
metadata:
  name: rollout-sample-dashboard
spec:
  selector:
    app.kubernetes.io/name: rollout-sample-dashboard
  ports:
    - name: http
      port: 3000
      protocol: TCP
      targetPort: http
---
apiVersion: argo.tensegrity.fastforge.io/v1alpha1
kind: Rollout
metadata:
  labels:
    app.kubernetes.io/name: rollout-sample-dashboard
  name: rollout-sample-dashboard
spec:
  replicas: 4
  strategy:
    canary:
      steps:
        - setWeight: 25
        - pause: { duration: 10 }
        - setWeight: 50
        - pause: { duration: 10 }
        - setWeight: 75
        - pause: { duration: 10 }
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: rollout-sample-dashboard
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rollout-sample-dashboard
    spec:
      containers:
        - name: rollout-sample-dashboard
          image: registry.k8s.io/e2e-test-images/agnhost:2.39
          command:
            - /agnhost
            - netexec
            - --http-port
            - "3000"
          readinessProbe:
            httpGet:
              port: 3000
          livenessProbe:
            httpGet:
              port: 3000
            initialDelaySeconds: 10
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
  delegates:
    - kind: Namespace
      name: testing
    - kind: Namespace
      name: staging
    - kind: Namespace
      name: production
  consumes:
    - apiVersion: argo.tensegrity.fastforge.io/v1alpha1
      kind: Rollout
      name: rollout-sample-api
      maps:
        API_HOST: http-host
        API_PORT: http-port
  produces:
    - key: http-host
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      fieldPath: '{ .spec.rules[0].host }.{ .metadata.namespace }'
    - key: http-port
      apiVersion: v1
      kind: Service
      fieldPath: '{ .spec.ports[?(@.name=="http")].port }'
