# Default values for tensegrity.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Chart metadata

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

securityContext: {
  runAsNonRoot: true
}

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# progressDeadlineSeconds
progressDeadlineSeconds: 600

# revisionHistoryLimit
revisionHistoryLimit: 10

terminationGracePeriodSeconds: 10

schedulerName: default-scheduler

restartPolicy: Always

dnsPolicy: ClusterFirst

# Additional volumes on the output Deployment definition.
volumes: [
  - name: cert
    secret:
      secretName: tensegrity-webhook-server-cert
      defaultMode: 420
]
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

tensegrity:
  podAnnotations: {}
  podLabels: {}

  service:
    port: 9443
    name: webhook-server
    protocol: TCP

  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi

  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /healthz
      port: 8081
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 1

  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /readyz
      port: 8081
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: ghcr.io/fastforgeinc/tensegrity:v0.0.1-alpha.2
    pullPolicy: Always
    tag: ""
  imagePullSecrets: ['tensegrity-registry-fastforge']

  securityContext: {
      allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
  }

  terminationMessagePath: /dev/termination-log
  terminationMessagePolicy: File
  # Additional volumeMounts on the output Deployment definition.

  volumeMounts: [
    - mountPath: /tmp/k8s-webhook-server/serving-certs
      name: cert
      readOnly: true
  ]

  podSecurityContext: {
    runAsNonRoot: true
  }

rbac-proxy:
  podAnnotations: {}
  podLabels: {}

  name: kube-rbac-proxy

  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: gcr.io/kubebuilder/kube-rbac-proxy:v0.15.0
    pullPolicy: IfNotPresent
    tag: ""
  imagePullSecrets: ['tensegrity-registry-fastforge']

  service:
    port: 8443
    name: https
    protocol: TCP

  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 5m
      memory: 64Mi

  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /healthz
      port: 8081
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 1

  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /readyz
      port: 8081
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

# runAsNonRoot: true
  securityContext:
    allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL

  terminationMessagePath: /dev/termination-log
  terminationMessagePolicy: File
  # Additional volumeMounts on the output Deployment definition.

  volumeMounts: [
    - mountPath: /tmp/k8s-webhook-server/serving-certs
      name: cert
      readOnly: true
  ]

podSecurityContext: {
  runAsNonRoot: true
}

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "tensegrity-controller-manager"


  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

rbac:
  resources: {}

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
